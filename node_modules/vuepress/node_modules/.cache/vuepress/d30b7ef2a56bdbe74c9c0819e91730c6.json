{"remainingRequest":"/Users/mac/workbase/animation/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/workbase/animation/docs/.vuepress/components/SinRunPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mac/workbase/animation/docs/.vuepress/components/SinRunPanel.vue","mtime":1585468976092},{"path":"/Users/mac/workbase/animation/node_modules/cache-loader/dist/cjs.js","mtime":1585216689466},{"path":"/Users/mac/workbase/animation/node_modules/babel-loader/lib/index.js","mtime":1585637787426},{"path":"/Users/mac/workbase/animation/node_modules/cache-loader/dist/cjs.js","mtime":1585216689466},{"path":"/Users/mac/workbase/animation/node_modules/vue-loader/lib/index.js","mtime":1585637788225}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n\nimport Wave from \"./wave.js\";\nexport default {\n  data() {\n    return {\n      ele: null,\n      ctx: null,\n      canvas: null,\n      width: null,\n      height: null,\n      waves: [],\n      xMove: null,\n      xSpeed: null,\n      options: {}\n    };\n  },\n  mounted() {\n    this.ele = this.$refs.canvas;\n    this.ctx = this.ele.getContext(\"2d\");\n    this.resize();\n    window.addEventListener(\"resize\", () => this.resize());\n    this.run(() => {\n      this.ctx.clearRect(0, 0, this.ele.width, this.ele.height);\n      this.waves.forEach(wave => {\n        wave.draw(this.ctx);\n      });\n    });\n  },\n  methods: {\n    resize() {\n      this.width = this.ele.width = this.ele.offsetWidth;\n      this.height = this.ele.height = this.ele.offsetHeight;\n      this.init();\n    },\n    run(callback) {\n      requestAnimationFrame(() => {\n        this.run(callback);\n      });\n      callback();\n    },\n    init() {\n      const gradients = [\n        [\"#6e45e2\", \"#88d3ce\"],\n        [\"#de6262\", \"#ffb88c\"],\n        [\"#64b3f4\", \"#c2e59c\"],\n        [\"#0fd850\", \"#f9f047\"],\n        [\"#007adf\", \"#00ecbc\"],\n        [\"#B6CEE8\", \"#F578DC\"],\n        [\"#9be15d\", \"#00e3ae\"]\n      ];\n      this.waves = [];\n      for (let i = 0; i < 5; i++) {\n        const [start, stop] = gradients[\n          Math.floor(Math.random() * gradients.length)\n        ];\n        this.waves.push(\n          new Wave(this.ele, {\n            start,\n            stop,\n            lineWidth: 1,\n            xSpeed: this.valueMapping(Math.random(), 0, 1, -0.05, -0.08), // 偏移的速度\n            amplitude: this.valueMapping(Math.random(), 0, 1, 0.05, 0.5),\n            offset: Math.random() * 100  // 初始偏移\n          })\n        );\n      }\n    },\n    valueMapping(x, inMin, inMax, outMin, outMax) {\n      return ((x - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n    }\n  },\n};\n",{"version":3,"sources":["SinRunPanel.vue"],"names":[],"mappings":";;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SinRunPanel.vue","sourceRoot":"docs/.vuepress/components","sourcesContent":["<template>\n  <div class=\"sin-canvas-container\">\n    <canvas ref=\"canvas\" class=\"canvas\"></canvas>\n  </div>\n</template>\n<script>\nimport Wave from \"./wave.js\";\nexport default {\n  data() {\n    return {\n      ele: null,\n      ctx: null,\n      canvas: null,\n      width: null,\n      height: null,\n      waves: [],\n      xMove: null,\n      xSpeed: null,\n      options: {}\n    };\n  },\n  mounted() {\n    this.ele = this.$refs.canvas;\n    this.ctx = this.ele.getContext(\"2d\");\n    this.resize();\n    window.addEventListener(\"resize\", () => this.resize());\n    this.run(() => {\n      this.ctx.clearRect(0, 0, this.ele.width, this.ele.height);\n      this.waves.forEach(wave => {\n        wave.draw(this.ctx);\n      });\n    });\n  },\n  methods: {\n    resize() {\n      this.width = this.ele.width = this.ele.offsetWidth;\n      this.height = this.ele.height = this.ele.offsetHeight;\n      this.init();\n    },\n    run(callback) {\n      requestAnimationFrame(() => {\n        this.run(callback);\n      });\n      callback();\n    },\n    init() {\n      const gradients = [\n        [\"#6e45e2\", \"#88d3ce\"],\n        [\"#de6262\", \"#ffb88c\"],\n        [\"#64b3f4\", \"#c2e59c\"],\n        [\"#0fd850\", \"#f9f047\"],\n        [\"#007adf\", \"#00ecbc\"],\n        [\"#B6CEE8\", \"#F578DC\"],\n        [\"#9be15d\", \"#00e3ae\"]\n      ];\n      this.waves = [];\n      for (let i = 0; i < 5; i++) {\n        const [start, stop] = gradients[\n          Math.floor(Math.random() * gradients.length)\n        ];\n        this.waves.push(\n          new Wave(this.ele, {\n            start,\n            stop,\n            lineWidth: 1,\n            xSpeed: this.valueMapping(Math.random(), 0, 1, -0.05, -0.08), // 偏移的速度\n            amplitude: this.valueMapping(Math.random(), 0, 1, 0.05, 0.5),\n            offset: Math.random() * 100  // 初始偏移\n          })\n        );\n      }\n    },\n    valueMapping(x, inMin, inMax, outMin, outMax) {\n      return ((x - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n    }\n  },\n};\n</script>\n<style scoped>\n.sin-canvas-container {\n  width: 100%;\n  height: 100%;\n  background: #232323;\n}\n.canvas {\n  width: 100%;\n  height: 100%;\n}\n</style>"]}]}