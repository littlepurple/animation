{"remainingRequest":"/Users/mac/workbase/animation/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/mac/workbase/animation/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mac/workbase/animation/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/workbase/animation/docs/.vuepress/components/SinPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mac/workbase/animation/docs/.vuepress/components/SinPanel.vue","mtime":1585634673606},{"path":"/Users/mac/workbase/animation/node_modules/cache-loader/dist/cjs.js","mtime":1585216689466},{"path":"/Users/mac/workbase/animation/node_modules/babel-loader/lib/index.js","mtime":1585637787426},{"path":"/Users/mac/workbase/animation/node_modules/cache-loader/dist/cjs.js","mtime":1585216689466},{"path":"/Users/mac/workbase/animation/node_modules/vue-loader/lib/index.js","mtime":1585637788225}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      ele: null,\n      ctx: null,\n      width: null,\n      height: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.ele = this.$refs.canvas;\n    this.ctx = this.ele.getContext(\"2d\");\n    this.resize();\n    window.addEventListener(\"resize\", function () {\n      return _this.resize();\n    });\n    this.draw(this.ctx);\n  },\n  methods: {\n    draw: function draw(ctx) {\n      this.ctx.clearRect(0, 0, this.ele.width, this.ele.height);\n      ctx.beginPath();\n      ctx.moveTo(0, this.height / 2); //   创建线性的渐变对象 (x0, y0, y1, y2)\n\n      var grad = ctx.createLinearGradient(0, 0, this.width, 0);\n      grad.addColorStop(0, \"#6e45e2\"); // 规定渐变的颜色\n\n      grad.addColorStop(1, \"#88d3ce\");\n      ctx.strokeStyle = grad;\n      var amplitude = Math.random() * 60 + 10;\n\n      for (var x = 0; x < this.width; x++) {\n        var y = Math.sin(x * 0.02) * amplitude + this.ele.height / 2;\n        ctx.lineTo(x, y);\n      }\n\n      ctx.stroke();\n      ctx.closePath();\n    },\n    resize: function resize() {\n      this.width = this.ele.width = this.ele.offsetWidth;\n      this.height = this.ele.height = this.ele.offsetHeight;\n      this.draw(this.ctx);\n    }\n  }\n};",{"version":3,"sources":["SinPanel.vue"],"names":[],"mappings":";;;;;AAMA,eAAA;AACA,MADA,kBACA;AACA,WAAA;AACA,WAAA,IADA;AAEA,WAAA,IAFA;AAGA,aAAA,IAHA;AAIA,cAAA;AAJA,KAAA;AAMA,GARA;AASA,SATA,qBASA;AAAA;;AACA,SAAA,GAAA,GAAA,KAAA,KAAA,CAAA,MAAA;AACA,SAAA,GAAA,GAAA,KAAA,GAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,SAAA,MAAA;AACA,WAAA,gBAAA,CAAA,QAAA,EAAA;AAAA,aAAA,MAAA,MAAA,EAAA;AAAA,KAAA;AACA,SAAA,IAAA,CAAA,KAAA,GAAA;AACA,GAfA;AAgBA,WAAA;AACA,QADA,gBACA,GADA,EACA;AACA,WAAA,GAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,GAAA,CAAA,KAAA,EAAA,KAAA,GAAA,CAAA,MAAA;AACA,UAAA,SAAA;AACA,UAAA,MAAA,CAAA,CAAA,EAAA,KAAA,MAAA,GAAA,CAAA,EAHA,CAIA;;AACA,UAAA,OAAA,IAAA,oBAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,KAAA,EAAA,CAAA,CAAA;AACA,WAAA,YAAA,CAAA,CAAA,EAAA,SAAA,EANA,CAMA;;AACA,WAAA,YAAA,CAAA,CAAA,EAAA,SAAA;AACA,UAAA,WAAA,GAAA,IAAA;AACA,UAAA,YAAA,KAAA,MAAA,KAAA,EAAA,GAAA,EAAA;;AACA,WAAA,IAAA,IAAA,CAAA,EAAA,IAAA,KAAA,KAAA,EAAA,GAAA,EAAA;AACA,YAAA,IAAA,KAAA,GAAA,CAAA,IAAA,IAAA,IAAA,SAAA,GAAA,KAAA,GAAA,CAAA,MAAA,GAAA,CAAA;AACA,YAAA,MAAA,CAAA,CAAA,EAAA,CAAA;AACA;;AACA,UAAA,MAAA;AACA,UAAA,SAAA;AACA,KAjBA;AAkBA,UAlBA,oBAkBA;AACA,WAAA,KAAA,GAAA,KAAA,GAAA,CAAA,KAAA,GAAA,KAAA,GAAA,CAAA,WAAA;AACA,WAAA,MAAA,GAAA,KAAA,GAAA,CAAA,MAAA,GAAA,KAAA,GAAA,CAAA,YAAA;AACA,WAAA,IAAA,CAAA,KAAA,GAAA;AACA;AAtBA;AAhBA,CAAA","sourcesContent":["<template>\n  <div class=\"sin-canvas-container\">\n    <canvas ref=\"canvas\" class=\"canvas\"></canvas>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      ele: null,\n      ctx: null,\n      width: null,\n      height: null\n    };\n  },\n  mounted() {\n    this.ele = this.$refs.canvas;\n    this.ctx = this.ele.getContext(\"2d\");\n    this.resize();\n    window.addEventListener(\"resize\", () => this.resize());\n    this.draw(this.ctx);\n  },\n  methods: {\n    draw(ctx) {\n      this.ctx.clearRect(0, 0, this.ele.width, this.ele.height);\n      ctx.beginPath();\n      ctx.moveTo(0, this.height / 2);\n      //   创建线性的渐变对象 (x0, y0, y1, y2)\n      var grad = ctx.createLinearGradient(0, 0, this.width, 0);\n      grad.addColorStop(0, \"#6e45e2\"); // 规定渐变的颜色\n      grad.addColorStop(1, \"#88d3ce\");\n      ctx.strokeStyle = grad;\n      const amplitude = Math.random() * 60 + 10;\n      for (let x = 0; x < this.width; x++) {\n        const y = Math.sin(x * 0.02) * amplitude + this.ele.height / 2;\n        ctx.lineTo(x, y);\n      }\n      ctx.stroke();\n      ctx.closePath();\n    },\n    resize() {\n      this.width = this.ele.width = this.ele.offsetWidth;\n      this.height = this.ele.height = this.ele.offsetHeight;\n      this.draw(this.ctx);\n    }\n  }\n};\n</script>\n<style scoped>\n.sin-canvas-container {\n  width: 100%;\n  height: 100%;\n  background: #232323;\n}\n.canvas {\n  width: 100%;\n  height: 100%;\n}\n</style>"],"sourceRoot":"docs/.vuepress/components"}]}